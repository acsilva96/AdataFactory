{
	"name": "ListItemsToUpdate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "GraphDataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "UpnCsv",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ListOutputJson",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Flatten1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Filter1"
				}
			],
			"script": "parameters{\n\tupdateColumn as string,\n\tmatchCsvColumn as string ('UPN'),\n\tmatchListColumn as string,\n\tupdateWithCsvColumn as string ('NewUPN'),\n\toldValueCsvColumn as string ('UPN')\n}\nsource(output(\n\t\tbody as ({@odata.context} as string, value as ({@odata.etag} as string, contentType as (id as string, name as string), createdBy as (user as (displayName as string, email as string, id as string)), createdDateTime as timestamp, eTag as string, fields as ({@odata.etag} as string, Attachments as boolean, AuthorLookupId as short, ContentType as string, Created as timestamp, DelegationDateFrom as date, DelegationDateTo as date, DelegationDelegatedPerson as string, DelegationEnabled as boolean, Edit as string, EditorLookupId as short, FolderChildCount as boolean, ItemChildCount as boolean, LinkTitle as string, LinkTitleNoMenu as string, Modified as timestamp, NotificationChannels as string[], Title as string, {_ComplianceFlags} as short, {_ComplianceTag} as string, {_ComplianceTagUserId} as short, {_ComplianceTagWrittenTime} as timestamp, {_IsRecord} as short, {_UIVersionString} as double, id as short), {fields@odata.context} as string, id as short, lastModifiedBy as (user as (displayName as string, email as string, id as string)), lastModifiedDateTime as timestamp, parentReference as (siteId as string), webUrl as string)[]),\n\t\theaders as [string,string]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\thttpMethod: 'GET',\n\ttimeout: 600,\n\trequestInterval: 100,\n\tqueryParameters: ['$expand' -> 'fields'],\n\tpaginationRules: ['AbsoluteUrl' -> ($['@odata.nextLink'])],\n\tresponseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1\nsource(output(\n\t\tAADObjectGuid as string,\n\t\tOldEmailAddress as string,\n\t\tOutcome as string,\n\t\tUPN as string,\n\t\tType as string,\n\t\tNewEmailAddress as string,\n\t\tNewUPN as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['queue/*.csv']) ~> source2\nsource1 foldDown(unroll(body.value),\n\tmapColumn(\n\t\tid = body.value.id,\n\t\tWebUrl = body.value.webUrl,\n\t\tfields = body.value.fields\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nMapDrifted1, MapDrifted2 join(MapDrifted1@MatchBy == MapDrifted2@MatchBy,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nFlatten1 derive(each(match(name=='id'), 'UpdateField' = toString($updateColumn), 'MatchBy' = regexExtract(toString(byPath(concat('fields.', $matchListColumn))), `(\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}\\b)`, 1), 'OldFieldValue' = toString(byPath(concat('fields.', $updateColumn)))),\n\t\teach(match(name=='WebUrl'), $$ = left(WebUrl, minus(locate('/Lists/', WebUrl), 1)), 'ListName' = regexExtract(WebUrl, `Lists\\/(\\S+)\\/`))) ~> MapDrifted1\nFilter1 derive(each(match(name=='AADObjectGuid'), 'MatchBy' = toString(byName($matchCsvColumn)), 'Value' = toString(byName($updateWithCsvColumn)), 'OldValue' = toString(byName($oldValueCsvColumn)))) ~> MapDrifted2\nAggregate1 alterRow(insertIf(true())) ~> AlterRow1\nJoin1 aggregate(Value = collect(@(Id = id, SiteUrl = WebUrl, ListName = ListName, FieldName = UpdateField, Value = replace(OldFieldValue, OldValue, Value)))) ~> Aggregate1\nsource2 filter(Outcome=='Successful') ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(uuid(), '.json'))],\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tValue\n\t),\n\tpartitionBy('hash', 1)) ~> sink1"
		}
	}
}