{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "acsivlafactory"
		},
		"AzureHDInsightLinkedService_clusterPassword": {
			"type": "secureString",
			"metadata": "Secure string for 'clusterPassword' of 'AzureHDInsightLinkedService'"
		},
		"AzureHDInsightLinkedService_clusterSshPassword": {
			"type": "secureString",
			"metadata": "Secure string for 'clusterSshPassword' of 'AzureHDInsightLinkedService'"
		},
		"AzureHDInsightLinkedService_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureHDInsightLinkedService'"
		},
		"linkedService1HDINSIGHT_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'linkedService1HDINSIGHT'"
		},
		"AzureBlobStorage1_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://tutorialstorageacsilva.blob.core.windows.net"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_hostSubscriptionId": {
			"type": "string",
			"defaultValue": "0cd04847-61eb-4fb9-8232-34a3b213b751"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_clusterResourceGroup": {
			"type": "string",
			"defaultValue": "tutorial-mappingDataFlow"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "ac9b3b80-b76c-4448-9781-a15bb05e9c74"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_clusterUserName": {
			"type": "string",
			"defaultValue": "clustername"
		},
		"InputDataset_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "SASblobSAS"
		},
		"SADataEnergyRun_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'SADataEnergyRun'"
		},
		"SADataEnergyRun_properties_typeProperties_sasToken_secretName": {
			"type": "string",
			"defaultValue": "SADATAENERGYSASKEY"
		},
		"SnowflakeCDW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SnowflakeCDW'"
		},
		"linkedService1HDINSIGHT_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "clustername"
		},
		"Tumbling_properties_pipeline_parameters_GetTime": {
			"type": "string",
			"defaultValue": "@utcnow()"
		},
		"tumbling1min_properties_pipeline_parameters_GetTime": {
			"type": "string",
			"defaultValue": "@utcnow()"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/sqlDB_snowflake_repro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "moviesSnowflake"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorage1_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "IRabroad",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureHDInsightLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HDInsightOnDemand",
				"typeProperties": {
					"clusterType": "spark",
					"clusterSize": 4,
					"timeToLive": "00:15:00",
					"version": "4.0",
					"hostSubscriptionId": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_hostSubscriptionId')]",
					"clusterResourceGroup": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_clusterResourceGroup')]",
					"servicePrincipalId": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_servicePrincipalId')]",
					"tenant": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_tenant')]",
					"clusterNamePrefix": "",
					"clusterUserName": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_clusterUserName')]",
					"clusterPassword": {
						"type": "SecureString",
						"value": "[parameters('AzureHDInsightLinkedService_clusterPassword')]"
					},
					"clusterSshPassword": {
						"type": "SecureString",
						"value": "[parameters('AzureHDInsightLinkedService_clusterSshPassword')]"
					},
					"sparkVersion": "",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureHDInsightLinkedService_servicePrincipalKey')]"
					},
					"linkedServiceName": {
						"referenceName": "AzureBlobStorageMINECRAFT",
						"type": "LinkedServiceReference"
					},
					"headNodeSize": "",
					"dataNodeSize": "",
					"zookeeperNodeSize": ""
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputDataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('InputDataset_properties_typeProperties_sasUri_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "IRabroad",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SADataEnergyRun')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('SADataEnergyRun_sasUri')]",
					"sasToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KVDataEnergyRun",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('SADataEnergyRun_properties_typeProperties_sasToken_secretName')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeCDW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": "[parameters('SnowflakeCDW_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KVDataEnergyRun",
							"type": "LinkedServiceReference"
						},
						"secretName": "SNOWFLAKEDATAFACTORYPWDENERGY"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1HDINSIGHT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HDInsight",
				"typeProperties": {
					"clusterUri": "https://u0e4b3b08-8628-4039-ab51-3db5bb00b0d9.azurehdinsight.net",
					"userName": "[parameters('linkedService1HDINSIGHT_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('linkedService1HDINSIGHT_password')]"
					},
					"isEspEnabled": false,
					"linkedServiceName": {
						"referenceName": "AzureBlobStorage7",
						"type": "LinkedServiceReference"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/15min_cycle')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PatientPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2021-10-14T17:08:00Z",
						"endTime": "2021-10-15T02:42:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/15min_tumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "PatientPipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2021-10-14T17:10:00Z",
					"endTime": "2021-10-15T03:42:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Triggers",
						"type": "PipelineReference"
					},
					"parameters": {
						"GetTime": "[parameters('Tumbling_properties_pipeline_parameters_GetTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2021-10-26T09:50:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumbling1min')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Triggers",
						"type": "PipelineReference"
					},
					"parameters": {
						"GetTime": "[parameters('tumbling1min_properties_pipeline_parameters_GetTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-10-26T10:21:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesfromMultipleContainers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.SourceFileDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "/"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "/"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryConnectionFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "test",
							"value": {
								"value": "@activity('Get Metadata1').output.lastModified",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLtoBLOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalesOrderDetailID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderDetail",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable102",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable103",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLtoFILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable101",
								"type": "DatasetReference",
								"parameters": {
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextSQLtoFILE101",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.DBName,'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DBName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Spark')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Spark1",
						"type": "HDInsightSpark",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"rootPath": "adftutorial/spark",
							"entryFilePath": "WordCount_Spark.py",
							"sparkJobLinkedService": {
								"referenceName": "AzureBlobStorageMINECRAFT",
								"type": "LinkedServiceReference"
							}
						},
						"linkedServiceName": {
							"referenceName": "linkedService1HDINSIGHT",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService1HDINSIGHT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Zipping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryCSVsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryCSVsink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@{pipeline().TriggerTime}.zip",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramDataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {
									"directory": "anyjson",
									"filename": "anyjson"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CASES"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Token",
						"description": "Get bearer token from Idealista",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.idealista.com/oauth/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded;charset=UTF-8"
							},
							"body": "grant_type=client_credentials&scope=read",
							"disableCertValidation": false,
							"authentication": {
								"type": "Basic",
								"username": "2v911ue369f0ezc5o6giz4jvn4hdcn64",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "AzureKeyVault",
										"type": "LinkedServiceReference"
									},
									"secretName": "idealistaSECRET"
								}
							}
						}
					},
					{
						"name": "Copy REST Data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{}",
								"additionalHeaders": {
									"Content-Type": "Content-Type: multipart/form-data;",
									"Authorization": {
										"value": "@concat('Bearer',activity('Get Token').output.access_token)",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['propertyCode']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "[['thumbnail']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "[['externalReference']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "[['numPhotos']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "[['price']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "[['propertyType']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "[['operation']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "[['size']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "[['exterior']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "[['rooms']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "[['bathrooms']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "[['address']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "[['province']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "[['municipality']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "[['country']"
										},
										"sink": {
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "[['latitude']"
										},
										"sink": {
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "[['longitude']"
										},
										"sink": {
											"ordinal": 17
										}
									},
									{
										"source": {
											"path": "[['showAddress']"
										},
										"sink": {
											"ordinal": 18
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"ordinal": 19
										}
									},
									{
										"source": {
											"path": "[['distance']"
										},
										"sink": {
											"ordinal": 20
										}
									},
									{
										"source": {
											"path": "[['hasVideo']"
										},
										"sink": {
											"ordinal": 21
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"ordinal": 22
										}
									},
									{
										"source": {
											"path": "[['newDevelopment']"
										},
										"sink": {
											"ordinal": 23
										}
									},
									{
										"source": {
											"path": "[['priceByArea']"
										},
										"sink": {
											"ordinal": 24
										}
									},
									{
										"source": {
											"path": "[['detailedType']['typology']"
										},
										"sink": {
											"ordinal": 25
										}
									},
									{
										"source": {
											"path": "[['detailedType']['subTypology']"
										},
										"sink": {
											"ordinal": 26
										}
									},
									{
										"source": {
											"path": "[['suggestedTexts']['subtitle']"
										},
										"sink": {
											"ordinal": 27
										}
									},
									{
										"source": {
											"path": "[['suggestedTexts']['title']"
										},
										"sink": {
											"ordinal": 28
										}
									},
									{
										"source": {
											"path": "[['hasPlan']"
										},
										"sink": {
											"ordinal": 29
										}
									},
									{
										"source": {
											"path": "[['has3DTour']"
										},
										"sink": {
											"ordinal": 30
										}
									},
									{
										"source": {
											"path": "[['has360']"
										},
										"sink": {
											"ordinal": 31
										}
									},
									{
										"source": {
											"path": "[['hasStaging']"
										},
										"sink": {
											"ordinal": 32
										}
									},
									{
										"source": {
											"path": "[['topNewDevelopment']"
										},
										"sink": {
											"ordinal": 33
										}
									},
									{
										"source": {
											"path": "$['total']"
										},
										"sink": {
											"ordinal": 34
										}
									},
									{
										"source": {
											"path": "$['totalPages']"
										},
										"sink": {
											"ordinal": 35
										}
									},
									{
										"source": {
											"path": "$['actualPage']"
										},
										"sink": {
											"ordinal": 36
										}
									},
									{
										"source": {
											"path": "$['itemsPerPage']"
										},
										"sink": {
											"ordinal": 37
										}
									},
									{
										"source": {
											"path": "$['numPaginations']"
										},
										"sink": {
											"ordinal": 38
										}
									},
									{
										"source": {
											"path": "$['hiddenResults']"
										},
										"sink": {
											"ordinal": 39
										}
									},
									{
										"source": {
											"path": "$['summary']"
										},
										"sink": {
											"ordinal": 40
										}
									},
									{
										"source": {
											"path": "$['lowerRangePosition']"
										},
										"sink": {
											"ordinal": 41
										}
									},
									{
										"source": {
											"path": "$['upperRangePosition']"
										},
										"sink": {
											"ordinal": 42
										}
									},
									{
										"source": {
											"path": "$['paginable']"
										},
										"sink": {
											"ordinal": 43
										}
									}
								],
								"collectionReference": "$['elementList']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestIdealista",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"country": {
						"type": "String",
						"defaultValue": "pt"
					},
					"locale": {
						"type": "String",
						"defaultValue": "pt"
					},
					"language": {
						"type": "String",
						"defaultValue": "pt"
					},
					"max_items": {
						"type": "String",
						"defaultValue": "1"
					},
					"operation": {
						"type": "String",
						"defaultValue": "sale"
					},
					"property_type": {
						"type": "String",
						"defaultValue": "homes"
					},
					"order": {
						"type": "String",
						"defaultValue": "priceDown"
					},
					"center": {
						"type": "String",
						"defaultValue": "38.7252,-9.1498"
					},
					"distance": {
						"type": "String",
						"defaultValue": "60000"
					},
					"sort": {
						"type": "String",
						"defaultValue": "desc"
					},
					"bankOffer": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"folder": {
					"name": "Idealista"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-24T17:42:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_SAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable105",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "linkedServiceLOGSdelete",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": "2021-11-01T00:00:00.000Z",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CASES"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}