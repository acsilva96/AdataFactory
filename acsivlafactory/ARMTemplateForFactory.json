{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "acsivlafactory"
		},
		"ADLS gen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS gen2'"
		},
		"AzureBlobStorage10_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage10'"
		},
		"AzureBlobStorage11_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage11'"
		},
		"AzureBlobStorage12_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage12'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"AzureBlobStorage4_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage4'"
		},
		"AzureBlobStorage5_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage5'"
		},
		"AzureBlobStorage6_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage6'"
		},
		"AzureBlobStorage7_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage7'"
		},
		"AzureBlobStorage8_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage8'"
		},
		"AzureBlobStorage9_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage9'"
		},
		"AzureBlobStorageCSVs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageCSVs'"
		},
		"AzureBlobStorageMINECRAFT_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageMINECRAFT'"
		},
		"AzureBlobStorageSOURCEcsv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageSOURCEcsv'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDatabricks_LinkedService_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks_LinkedService'"
		},
		"AzureHDInsightLinkedService_clusterPassword": {
			"type": "secureString",
			"metadata": "Secure string for 'clusterPassword' of 'AzureHDInsightLinkedService'"
		},
		"AzureHDInsightLinkedService_clusterSshPassword": {
			"type": "secureString",
			"metadata": "Secure string for 'clusterSshPassword' of 'AzureHDInsightLinkedService'"
		},
		"AzureHDInsightLinkedService_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AzureHDInsightLinkedService'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase101_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase101'"
		},
		"AzureSqlDatabase102_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase102'"
		},
		"AzureSqlDatabase103_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase103'"
		},
		"AzureSqlDatabase104_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase104'"
		},
		"AzureSqlDatabase105_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase105'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"Blob_Idealista_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Blob_Idealista'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"linkedService1HDINSIGHT_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'linkedService1HDINSIGHT'"
		},
		"linkedService2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService2'"
		},
		"linkedService3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService3'"
		},
		"linkedServiceLOGSdelete_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedServiceLOGSdelete'"
		},
		"sql_snowflake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_snowflake'"
		},
		"ADLS gen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://tutorialstorageacsilva.dfs.core.windows.net"
		},
		"AzureBlobStorage1_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://tutorialstorageacsilva.blob.core.windows.net"
		},
		"AzureBlobStorageSAS_allow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorageSAS_allow'"
		},
		"AzureBlobStorage_SAS_DENY_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage_SAS_DENY'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageacsilva.dfs.core.windows.net"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_hostSubscriptionId": {
			"type": "string",
			"defaultValue": "0cd04847-61eb-4fb9-8232-34a3b213b751"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_clusterResourceGroup": {
			"type": "string",
			"defaultValue": "tutorial-mappingDataFlow"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "ac9b3b80-b76c-4448-9781-a15bb05e9c74"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"AzureHDInsightLinkedService_properties_typeProperties_clusterUserName": {
			"type": "string",
			"defaultValue": "clustername"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://idealista.vault.azure.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mypandorasecrets.vault.azure.net/"
		},
		"InputDataset_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "SASblobSAS"
		},
		"KVDataEnergyRun_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://KV-Data-Energy-RUN.vault.azure.net/"
		},
		"Market Watch API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://marketwatch-api.hqrevenue.com/api/v1/"
		},
		"RESTAPIIdealista_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.idealista.com/3.5/"
		},
		"RestService133_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://marketwatch-api.hqrevenue.com/api/v1/"
		},
		"RestServiceDUMMYapi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hub.dummyapis.com/"
		},
		"RestServiceIdealista_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.idealista.com/3.5/"
		},
		"SADataEnergyRun_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'SADataEnergyRun'"
		},
		"SADataEnergyRun_properties_typeProperties_sasToken_secretName": {
			"type": "string",
			"defaultValue": "SADATAENERGYSASKEY"
		},
		"SnowflakeCDW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SnowflakeCDW'"
		},
		"linkedService1HDINSIGHT_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "clustername"
		},
		"Tumbling_properties_pipeline_parameters_GetTime": {
			"type": "string",
			"defaultValue": "@utcnow()"
		},
		"tumbling1min_properties_pipeline_parameters_GetTime": {
			"type": "string",
			"defaultValue": "@utcnow()"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BlobToSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empTXT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "myazsql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empTXT')]",
				"[concat(variables('factoryId'), '/datasets/myazsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BricksPipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/v-alsilva@microsoft.com/adftutorial/mynotebook",
							"baseParameters": {
								"input": {
									"value": "@pipeline().parameters.name",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_LinkedService",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromBlobToBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "InputDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OutputDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]",
				"[concat(variables('factoryId'), '/datasets/OutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesfromMultipleContainers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.SourceFileDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "/"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "/"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinarySourceFileStore')]",
				"[concat(variables('factoryId'), '/datasets/BinarySinkFileStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToSqlPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_384",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adftutorial//inputEmp.txt"
							},
							{
								"name": "Destination",
								"value": ".Azure Blob Storage file"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_384",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_384",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_384')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_384')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Idealista')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Token",
						"description": "Get bearer token from Idealista",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.idealista.com/oauth/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded;charset=UTF-8"
							},
							"body": "grant_type=client_credentials&scope=read",
							"disableCertValidation": false,
							"authentication": {
								"type": "Basic",
								"username": "2v911ue369f0ezc5o6giz4jvn4hdcn64",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "AzureKeyVault1",
										"type": "LinkedServiceReference"
									},
									"secretName": "idealistaSECRET"
								}
							}
						}
					},
					{
						"name": "Copy REST Data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{}",
								"additionalHeaders": {
									"Content-Type": "Content-Type: multipart/form-data;",
									"Authorization": {
										"value": "@concat('Bearer',activity('Get Token').output.access_token)",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['propertyCode']"
										},
										"sink": {
											"path": "$['elementList']['propertyCode']"
										}
									},
									{
										"source": {
											"path": "[['thumbnail']"
										},
										"sink": {
											"path": "$['elementList']['thumbnail']"
										}
									},
									{
										"source": {
											"path": "[['externalReference']"
										},
										"sink": {
											"path": "$['elementList']['externalReference']"
										}
									},
									{
										"source": {
											"path": "[['numPhotos']"
										},
										"sink": {
											"path": "$['elementList']['numPhotos']"
										}
									},
									{
										"source": {
											"path": "[['price']"
										},
										"sink": {
											"path": "$['elementList']['price']"
										}
									},
									{
										"source": {
											"path": "[['propertyType']"
										},
										"sink": {
											"path": "$['elementList']['propertyType']"
										}
									},
									{
										"source": {
											"path": "[['operation']"
										},
										"sink": {
											"path": "$['elementList']['operation']"
										}
									},
									{
										"source": {
											"path": "[['size']"
										},
										"sink": {
											"path": "$['elementList']['size']"
										}
									},
									{
										"source": {
											"path": "[['exterior']"
										},
										"sink": {
											"path": "$['elementList']['exterior']"
										}
									},
									{
										"source": {
											"path": "[['rooms']"
										},
										"sink": {
											"path": "$['elementList']['rooms']"
										}
									},
									{
										"source": {
											"path": "[['bathrooms']"
										},
										"sink": {
											"path": "$['elementList']['bathrooms']"
										}
									},
									{
										"source": {
											"path": "[['address']"
										},
										"sink": {
											"path": "$['elementList']['address']"
										}
									},
									{
										"source": {
											"path": "[['province']"
										},
										"sink": {
											"path": "$['elementList']['province']"
										}
									},
									{
										"source": {
											"path": "[['municipality']"
										},
										"sink": {
											"path": "$['elementList']['municipality']"
										}
									},
									{
										"source": {
											"path": "[['country']"
										},
										"sink": {
											"path": "$['elementList']['country']"
										}
									},
									{
										"source": {
											"path": "[['latitude']"
										},
										"sink": {
											"path": "$['elementList']['latitude']"
										}
									},
									{
										"source": {
											"path": "[['longitude']"
										},
										"sink": {
											"path": "$['elementList']['longitude']"
										}
									},
									{
										"source": {
											"path": "[['showAddress']"
										},
										"sink": {
											"path": "$['elementList']['showAddress']"
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"path": "$['elementList']['url']"
										}
									},
									{
										"source": {
											"path": "[['distance']"
										},
										"sink": {
											"path": "$['elementList']['distance']"
										}
									},
									{
										"source": {
											"path": "[['hasVideo']"
										},
										"sink": {
											"path": "$['elementList']['hasVideo']"
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"path": "$['elementList']['status']"
										}
									},
									{
										"source": {
											"path": "[['newDevelopment']"
										},
										"sink": {
											"path": "$['elementList']['newDevelopment']"
										}
									},
									{
										"source": {
											"path": "[['priceByArea']"
										},
										"sink": {
											"path": "$['elementList']['priceByArea']"
										}
									},
									{
										"source": {
											"path": "[['detailedType']['typology']"
										},
										"sink": {
											"path": "$['elementList']['detailedType']['typology']"
										}
									},
									{
										"source": {
											"path": "[['detailedType']['subTypology']"
										},
										"sink": {
											"path": "$['elementList']['detailedType']['subTypology']"
										}
									},
									{
										"source": {
											"path": "[['suggestedTexts']['subtitle']"
										},
										"sink": {
											"path": "$['elementList']['suggestedTexts']['subtitle']"
										}
									},
									{
										"source": {
											"path": "[['suggestedTexts']['title']"
										},
										"sink": {
											"path": "$['elementList']['suggestedTexts']['title']"
										}
									},
									{
										"source": {
											"path": "[['hasPlan']"
										},
										"sink": {
											"path": "$['elementList']['hasPlan']"
										}
									},
									{
										"source": {
											"path": "[['has3DTour']"
										},
										"sink": {
											"path": "$['elementList']['has3DTour']"
										}
									},
									{
										"source": {
											"path": "[['has360']"
										},
										"sink": {
											"path": "$['elementList']['has360']"
										}
									},
									{
										"source": {
											"path": "[['hasStaging']"
										},
										"sink": {
											"path": "$['elementList']['hasStaging']"
										}
									},
									{
										"source": {
											"path": "[['topNewDevelopment']"
										},
										"sink": {
											"path": "$['elementList']['topNewDevelopment']"
										}
									},
									{
										"source": {
											"path": "$['total']"
										},
										"sink": {
											"path": "$['total']"
										}
									},
									{
										"source": {
											"path": "$['totalPages']"
										},
										"sink": {
											"path": "$['totalPages']"
										}
									},
									{
										"source": {
											"path": "$['actualPage']"
										},
										"sink": {
											"path": "$['actualPage']"
										}
									},
									{
										"source": {
											"path": "$['itemsPerPage']"
										},
										"sink": {
											"path": "$['itemsPerPage']"
										}
									},
									{
										"source": {
											"path": "$['numPaginations']"
										},
										"sink": {
											"path": "$['numPaginations']"
										}
									},
									{
										"source": {
											"path": "$['hiddenResults']"
										},
										"sink": {
											"path": "$['hiddenResults']"
										}
									},
									{
										"source": {
											"path": "$['summary']"
										},
										"sink": {
											"path": "$['summary']"
										}
									},
									{
										"source": {
											"path": "$['lowerRangePosition']"
										},
										"sink": {
											"path": "$['lowerRangePosition']"
										}
									},
									{
										"source": {
											"path": "$['upperRangePosition']"
										},
										"sink": {
											"path": "$['upperRangePosition']"
										}
									},
									{
										"source": {
											"path": "$['paginable']"
										},
										"sink": {
											"path": "$['paginable']"
										}
									}
								],
								"collectionReference": "$['elementList']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestAPIIdealista",
								"type": "DatasetReference",
								"parameters": {
									"country": "pt",
									"locale": "pt",
									"language": "pt",
									"max_items": "3",
									"operation": "sale",
									"property_type": "homes",
									"order": "priceDown",
									"center": "38.7252,-9.1498",
									"distance": "60000",
									"sort": "desc",
									"bankOffer": "false"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ResultIdealista",
								"type": "DatasetReference",
								"parameters": {
									"date": {
										"value": "@substring(string(utcnow()),0,10)",
										"type": "Expression"
									},
									"name": {
										"value": "@concat(pipeline().RunId,'_',utcnow())",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"country": "pt",
										"locale": "pt",
										"language": "pt",
										"max_items": "1",
										"operation": "sale",
										"property_type": "homes",
										"order": "priceDown",
										"center": "38.7252,-9.1498",
										"distance": "60000",
										"sort": "desc",
										"bankOffer": "false"
									},
									"sink1": {
										"date": "@substring(string(utcnow()),0,10)",
										"name": "@concat(pipeline().RunId,'_',utcnow())"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"country": {
						"type": "String",
						"defaultValue": "pt"
					},
					"locale": {
						"type": "String",
						"defaultValue": "pt"
					},
					"language": {
						"type": "String",
						"defaultValue": "pt"
					},
					"max_items": {
						"type": "String",
						"defaultValue": "1"
					},
					"operation": {
						"type": "String",
						"defaultValue": "sale"
					},
					"property_type": {
						"type": "String",
						"defaultValue": "homes"
					},
					"order": {
						"type": "String",
						"defaultValue": "priceDown"
					},
					"center": {
						"type": "String",
						"defaultValue": "38.7252,-9.1498"
					},
					"distance": {
						"type": "String",
						"defaultValue": "60000"
					},
					"sort": {
						"type": "String",
						"defaultValue": "desc"
					},
					"bankOffer": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-24T17:42:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestAPIIdealista')]",
				"[concat(variables('factoryId'), '/datasets/ResultIdealista')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryConnectionFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "test",
							"value": {
								"value": "@activity('Get Metadata1').output.lastModified",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryConnectionFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PatientPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SLEEPING 5 seconds",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerQuery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery2",
								"type": "DataFlowReference",
								"datasetParameters": {
									"AzureSqlTable102": {},
									"SinkAzureSqlTable104": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "SinkAzureSqlTable104",
											"dataset": {
												"referenceName": "AzureSqlTable104",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkAzureSqlTable104"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable104')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLtoBLOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalesOrderDetailID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderDetail",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable102",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable103",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable102')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable103')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLtoFILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable101",
								"type": "DatasetReference",
								"parameters": {
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextSQLtoFILE101",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.DBName,'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DBName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable101')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextSQLtoFILE101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmailsStatuses')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SendSuccessEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-149.westeurope.logic.azure.com:443/workflows/2b0753ca52d2418aa04f550597ec6c7d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=6SfxhnLOEF1K7ZOEkrs1dZnK-sJkZvZcSkfNPeeJOUs",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\": \"@{activity('Copy1').output.dataWritten}\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"receiver\": \"@{pipeline().parameters.receiver}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SendFailureEmailActivity",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-126.westeurope.logic.azure.com:443/workflows/bfcca2d0942a44fc9521343e864c0948/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=esYLeOJQKhPW4eLjVj9SLjkhzx-5wvL_xfmH1XO4CkY",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\": \"@{activity('Copy1').error.message}\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"receiver\": \"@{pipeline().parameters.receiver}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceBlobContainer": {
						"type": "string"
					},
					"sinkBlobContainer": {
						"type": "string"
					},
					"receiver": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkBlobDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_repro')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "snowflake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Repros"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Spark')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Spark1",
						"type": "HDInsightSpark",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"rootPath": "adftutorial/spark",
							"entryFilePath": "WordCount_Spark.py",
							"sparkJobLinkedService": {
								"referenceName": "AzureBlobStorageMINECRAFT",
								"type": "LinkedServiceReference"
							}
						},
						"linkedServiceName": {
							"referenceName": "linkedService1HDINSIGHT",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMINECRAFT')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1HDINSIGHT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Triggers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerTime",
							"value": {
								"value": "@pipeline().parameters.GetTime",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"GetTime": {
						"type": "string"
					}
				},
				"variables": {
					"TriggerTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hub.dummyapis.com/employee?noofRecords=10&idStarts=1001",
							"method": "POST",
							"headers": {},
							"body": "."
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Zipping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryCSVsource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryCSVsink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@{pipeline().TriggerTime}.zip",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Training"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryCSVsource')]",
				"[concat(variables('factoryId'), '/datasets/BinaryCSVsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramDataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {
									"directory": "anyjson",
									"filename": "anyjson"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CASES"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Token",
						"description": "Get bearer token from Idealista",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.idealista.com/oauth/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded;charset=UTF-8"
							},
							"body": "grant_type=client_credentials&scope=read",
							"disableCertValidation": false,
							"authentication": {
								"type": "Basic",
								"username": "2v911ue369f0ezc5o6giz4jvn4hdcn64",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "AzureKeyVault",
										"type": "LinkedServiceReference"
									},
									"secretName": "idealistaSECRET"
								}
							}
						}
					},
					{
						"name": "Copy REST Data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{}",
								"additionalHeaders": {
									"Content-Type": "Content-Type: multipart/form-data;",
									"Authorization": {
										"value": "@concat('Bearer',activity('Get Token').output.access_token)",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['propertyCode']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "[['thumbnail']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "[['externalReference']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "[['numPhotos']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "[['price']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "[['propertyType']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "[['operation']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "[['size']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "[['exterior']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "[['rooms']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "[['bathrooms']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "[['address']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "[['province']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "[['municipality']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "[['country']"
										},
										"sink": {
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "[['latitude']"
										},
										"sink": {
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "[['longitude']"
										},
										"sink": {
											"ordinal": 17
										}
									},
									{
										"source": {
											"path": "[['showAddress']"
										},
										"sink": {
											"ordinal": 18
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"ordinal": 19
										}
									},
									{
										"source": {
											"path": "[['distance']"
										},
										"sink": {
											"ordinal": 20
										}
									},
									{
										"source": {
											"path": "[['hasVideo']"
										},
										"sink": {
											"ordinal": 21
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"ordinal": 22
										}
									},
									{
										"source": {
											"path": "[['newDevelopment']"
										},
										"sink": {
											"ordinal": 23
										}
									},
									{
										"source": {
											"path": "[['priceByArea']"
										},
										"sink": {
											"ordinal": 24
										}
									},
									{
										"source": {
											"path": "[['detailedType']['typology']"
										},
										"sink": {
											"ordinal": 25
										}
									},
									{
										"source": {
											"path": "[['detailedType']['subTypology']"
										},
										"sink": {
											"ordinal": 26
										}
									},
									{
										"source": {
											"path": "[['suggestedTexts']['subtitle']"
										},
										"sink": {
											"ordinal": 27
										}
									},
									{
										"source": {
											"path": "[['suggestedTexts']['title']"
										},
										"sink": {
											"ordinal": 28
										}
									},
									{
										"source": {
											"path": "[['hasPlan']"
										},
										"sink": {
											"ordinal": 29
										}
									},
									{
										"source": {
											"path": "[['has3DTour']"
										},
										"sink": {
											"ordinal": 30
										}
									},
									{
										"source": {
											"path": "[['has360']"
										},
										"sink": {
											"ordinal": 31
										}
									},
									{
										"source": {
											"path": "[['hasStaging']"
										},
										"sink": {
											"ordinal": 32
										}
									},
									{
										"source": {
											"path": "[['topNewDevelopment']"
										},
										"sink": {
											"ordinal": 33
										}
									},
									{
										"source": {
											"path": "$['total']"
										},
										"sink": {
											"ordinal": 34
										}
									},
									{
										"source": {
											"path": "$['totalPages']"
										},
										"sink": {
											"ordinal": 35
										}
									},
									{
										"source": {
											"path": "$['actualPage']"
										},
										"sink": {
											"ordinal": 36
										}
									},
									{
										"source": {
											"path": "$['itemsPerPage']"
										},
										"sink": {
											"ordinal": 37
										}
									},
									{
										"source": {
											"path": "$['numPaginations']"
										},
										"sink": {
											"ordinal": 38
										}
									},
									{
										"source": {
											"path": "$['hiddenResults']"
										},
										"sink": {
											"ordinal": 39
										}
									},
									{
										"source": {
											"path": "$['summary']"
										},
										"sink": {
											"ordinal": 40
										}
									},
									{
										"source": {
											"path": "$['lowerRangePosition']"
										},
										"sink": {
											"ordinal": 41
										}
									},
									{
										"source": {
											"path": "$['upperRangePosition']"
										},
										"sink": {
											"ordinal": 42
										}
									},
									{
										"source": {
											"path": "$['paginable']"
										},
										"sink": {
											"ordinal": 43
										}
									}
								],
								"collectionReference": "$['elementList']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestIdealista",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"country": {
						"type": "String",
						"defaultValue": "pt"
					},
					"locale": {
						"type": "String",
						"defaultValue": "pt"
					},
					"language": {
						"type": "String",
						"defaultValue": "pt"
					},
					"max_items": {
						"type": "String",
						"defaultValue": "1"
					},
					"operation": {
						"type": "String",
						"defaultValue": "sale"
					},
					"property_type": {
						"type": "String",
						"defaultValue": "homes"
					},
					"order": {
						"type": "String",
						"defaultValue": "priceDown"
					},
					"center": {
						"type": "String",
						"defaultValue": "38.7252,-9.1498"
					},
					"distance": {
						"type": "String",
						"defaultValue": "60000"
					},
					"sort": {
						"type": "String",
						"defaultValue": "desc"
					},
					"bankOffer": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"folder": {
					"name": "Idealista"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-24T17:42:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestIdealista')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IR1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IRabroad",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "IR2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "WestEUIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CASES"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/IRabroad')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/WestEUIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_SAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable105",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "linkedServiceLOGSdelete",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": "2021-11-01T00:00:00.000Z",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CASES"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable105')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedServiceLOGSdelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase101",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": {
							"value": "@dataset().DBName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DBName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable102')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase102",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase102')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable103')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase104",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailDUPLICATEID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "SalesOrderDetailDUPLICATE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase104')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable104')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase101",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "myacsilvadb"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "PQexcelNAcloud"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable105')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase105",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "CustomerAddress"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase105')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_SAS_DENY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sastest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_SAS_DENY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryCSVsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "SINK",
						"container": "test"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryCSVsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageSOURCEcsv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "*.csv",
							"type": "Expression"
						},
						"folderPath": "SOURCE",
						"container": "test"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageSOURCEcsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryConnectionFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp.txt",
						"container": "adftutorial"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySinkFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "linkedService2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySourceFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "linkedService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bad_output",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage9",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"container": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage9')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage10",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "idealista"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage10')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage12",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dfs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage12')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage12",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dfs2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage12')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextSQLtoFILE101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage4",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "adftutorial"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_384')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputDataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp.txt",
						"container": "adftutorial"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage6",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage11",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": "sastest"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage11')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputDataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "adftutorial"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_SAS_DENY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sastest-l"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_SAS_DENY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestAPIIdealista')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RESTAPIIdealista",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"country": {
						"type": "string",
						"defaultValue": "pt"
					},
					"locale": {
						"type": "string",
						"defaultValue": "pt"
					},
					"language": {
						"type": "string",
						"defaultValue": "pt"
					},
					"max_items": {
						"type": "string",
						"defaultValue": "1"
					},
					"operation": {
						"type": "string",
						"defaultValue": "sale"
					},
					"property_type": {
						"type": "string",
						"defaultValue": "homes"
					},
					"order": {
						"type": "string",
						"defaultValue": "priceDown"
					},
					"center": {
						"type": "string",
						"defaultValue": "38.7252,-9.1498"
					},
					"distance": {
						"type": "string",
						"defaultValue": "60000"
					},
					"sort": {
						"type": "string",
						"defaultValue": "desc"
					},
					"bankOffer": {
						"type": "string",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().country,\n'/search?operation=',dataset().operation,\n'&locale=',dataset().locale,\n'&maxItems=',dataset().max_items,\n'&order=',dataset().order,\n'&center=',dataset().center,\n'&distance=',dataset().distance,\n'&propertyType=',dataset().property_type,\n'&sort=',dataset().sort,\n'&language=',dataset().language)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RESTAPIIdealista')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestIdealista')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceIdealista",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceIdealista')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceDUMMYapi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "employee"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceDUMMYapi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResultIdealista')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob_Idealista",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().date",
							"type": "Expression"
						},
						"container": "apirawdata"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob_Idealista')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkBlobDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT(pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"container": {
							"value": "@pipeline().parameters.sinkBlobContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp.txt",
						"container": {
							"value": "@pipeline().parameters.sourceBlobContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_384')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputDataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inputEmp.txt",
						"container": "adftutorial"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empTXT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputDataset",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp.txt",
						"container": "adftutorial"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/goodMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Assets.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/myazsql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlDB_snowflake_repro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "moviesSnowflake"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS gen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS gen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS gen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorage1_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "IRabroad",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IRabroad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage10')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage10_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage11')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage11_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage12')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage12_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage4_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage5')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage5_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage6')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage6_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage7')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage7_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage8')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage8_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage9')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage9_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageCSVs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageCSVs_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageMINECRAFT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageMINECRAFT_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageSAS_allow')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorageSAS_allow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageSOURCEcsv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageSOURCEcsv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_SAS_DENY')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage_SAS_DENY_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4796461788598075.15.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_LinkedService_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "2",
					"newClusterVersion": "10.0.x-scala2.12",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureHDInsightLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HDInsightOnDemand",
				"typeProperties": {
					"clusterType": "spark",
					"clusterSize": 4,
					"timeToLive": "00:15:00",
					"version": "4.0",
					"hostSubscriptionId": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_hostSubscriptionId')]",
					"clusterResourceGroup": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_clusterResourceGroup')]",
					"servicePrincipalId": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_servicePrincipalId')]",
					"tenant": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_tenant')]",
					"clusterNamePrefix": "",
					"clusterUserName": "[parameters('AzureHDInsightLinkedService_properties_typeProperties_clusterUserName')]",
					"clusterPassword": {
						"type": "SecureString",
						"value": "[parameters('AzureHDInsightLinkedService_clusterPassword')]"
					},
					"clusterSshPassword": {
						"type": "SecureString",
						"value": "[parameters('AzureHDInsightLinkedService_clusterSshPassword')]"
					},
					"sparkVersion": "",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AzureHDInsightLinkedService_servicePrincipalKey')]"
					},
					"linkedServiceName": {
						"referenceName": "AzureBlobStorageMINECRAFT",
						"type": "LinkedServiceReference"
					},
					"headNodeSize": "",
					"dataNodeSize": "",
					"zookeeperNodeSize": ""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMINECRAFT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase101')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase101_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase102')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase102_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase103')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase103_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase104')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase104_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase105')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase105_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_Idealista')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Blob_Idealista_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputDataset')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('InputDataset_properties_typeProperties_sasUri_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "IRabroad",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IRabroad')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KVDataEnergyRun')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KVDataEnergyRun_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Market Watch API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Market Watch API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RESTAPIIdealista')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RESTAPIIdealista_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService133')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService133_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceDUMMYapi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceDUMMYapi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceIdealista')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceIdealista_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SADataEnergyRun')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('SADataEnergyRun_sasUri')]",
					"sasToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KVDataEnergyRun",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('SADataEnergyRun_properties_typeProperties_sasToken_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KVDataEnergyRun')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeCDW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": "[parameters('SnowflakeCDW_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KVDataEnergyRun",
							"type": "LinkedServiceReference"
						},
						"secretName": "SNOWFLAKEDATAFACTORYPWDENERGY"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KVDataEnergyRun')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1HDINSIGHT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HDInsight",
				"typeProperties": {
					"clusterUri": "https://u0e4b3b08-8628-4039-ab51-3db5bb00b0d9.azurehdinsight.net",
					"userName": "[parameters('linkedService1HDINSIGHT_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('linkedService1HDINSIGHT_password')]"
					},
					"isEspEnabled": false,
					"linkedServiceName": {
						"referenceName": "AzureBlobStorage7",
						"type": "LinkedServiceReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedServiceLOGSdelete')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedServiceLOGSdelete_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sql_snowflake_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/10sec_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-10-15T16:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/15min_cycle')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PatientPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2021-10-14T17:08:00Z",
						"endTime": "2021-10-15T02:42:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PatientPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/15min_tumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "PatientPipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2021-10-14T17:10:00Z",
					"endTime": "2021-10-15T03:42:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PatientPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Triggers",
						"type": "PipelineReference"
					},
					"parameters": {
						"GetTime": "[parameters('Tumbling_properties_pipeline_parameters_GetTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2021-10-26T09:50:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Triggers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumbling1min')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Triggers",
						"type": "PipelineReference"
					},
					"parameters": {
						"GetTime": "[parameters('tumbling1min_properties_pipeline_parameters_GetTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-10-26T10:21:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Triggers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRabroad')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIR-Alex')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WestEUIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "goodMovies",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText4",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/goodMovies')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "goodMovies",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText5",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/goodMovies')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestAPIIdealista",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ResultIdealista",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\thttpMethod: 'POST',\n\tbody: '{}',\n\ttimeout: 30,\n\trequestInterval: 0,\n\theaders: ['Content-TYpe' -> 'Content-Type: multipart/form-data;', 'Authorization' -> '@concat(\\'Bearer\\',activity(\\'Get Token\\').output.access_token)'],\n\tresponseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestAPIIdealista')]",
				"[concat(variables('factoryId'), '/datasets/ResultIdealista')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "AzureSqlTable102",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSqlTable102",
							"dataset": {
								"referenceName": "AzureSqlTable102",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared AzureSqlTable102 = let\r\n  AdfDoc = Sql.Database(\"mysqlserveracsilva.database.windows.net\", \"myacsilvadb\", [CreateNavigationProperties = false]),\r\n  InputTable = AdfDoc{[Schema = \"SalesLT\", Item = \"SalesOrderDetail\"]}[Data]\r\nin\r\n  InputTable;\r\nshared UserQuery = let\r\n  Source = AzureSqlTable102,\r\n  #\"Reordered columns\" = Table.ReorderColumns(Source, {\"SalesOrderID\", \"OrderQty\", \"ProductID\", \"UnitPrice\", \"SalesOrderDetailID\", \"UnitPriceDiscount\", \"LineTotal\", \"rowguid\", \"ModifiedDate\"}),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Reordered columns\", {\"SalesOrderDetailID\"}),\r\n  #\"Added custom\" = Table.AddColumn(#\"Removed columns\", \"DAY\", each Date.Day([ModifiedDate]))\r\nin\r\n  #\"Added custom\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable102')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snowflake')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "goodMovies",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sqlDB_snowflake_repro",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/goodMovies')]",
				"[concat(variables('factoryId'), '/datasets/sqlDB_snowflake_repro')]"
			]
		}
	]
}